# .bash_functions repo submodule

function _repo_dir
{
    local d="${1}"
    local r="${2}"
    if [ -n "${d}" ] && [ -d "${d}/.${r}" ]; then
        printf "${d}"
        return
    fi

    d=$PWD;
    while :; do
        if [ -d "${d}/.git" ]; then
            break;
        elif [ -d "${d}/.hg" ]; then
            break;
        elif [ -d "${d}/.svn" ]; then
            break;
        elif [ -d "${d}/.sl" ]; then
            break;
        fi;
	test "${d}"  = / && return;
        d=$(cd "${d}/.." && echo "$PWD");
    done
    printf ${d}
}

function _repo_type
{
    local r="${2}"
    if [ -n "${r}" ]; then
        printf ${r}
        return
    fi

    local d=${1};
    if [ -z "${d}" ]; then
	d=$(_repo_dir)
    fi


    if [ -d "$d/.git" ]; then
        printf git
    elif [ -d "$d/.hg" ]; then
        printf hg
    elif [ -d "$d/.svn" ]; then
        printf svn
    elif [ -d "$d/.sl" ]; then
        printf sl
    fi
}

function _repo_info
{
    local d="${1}"
    if [ -z "${d}" ]; then
	d=$(_repo_dir)
    fi
    local r="${2}"
    if [ -z "${r}" ]; then
        r=$(_repo_type "${d}")
    fi

    local br
    if [ "X$r" == "Xhg" ]; then
	br=$(__hg_info "${d}" "${r}")
    elif [ "X$r" == "Xgit" ]; then
	br=$(__git_info "${d}" "${r}")
    fi
    if [ -n ${br} ]; then
	printf "(${br})"
    fi
}


function _rgit
{
    /usr/local/bin/git "$@"
}

function rgit
{
    if [[ -z "$REPO" ]]; then
	_rgit "$@"
    else
        "$REPO" "$@"
    fi
}

function _rhg
{
    /usr/local/bin/hg "$@"
}

function rhg
{
    if [[ -z "$REPO" ]]; then
	_rhg "$@"
    else
        "$REPO" "$@"
    fi
}

function _rsl
{
    /opt/homebrew/bin/sl "$@"
}

function rsl
{
    if [[ -z "$REPO" ]]; then
	_rsl "$@"
    else
        "$REPO" "$@"
    fi
}

function r
{
    "$REPO" "$@"
}

function repo_commit
{
    case $(_repo_type) in
	git)
	    local BASE_DIR=$(git rev-parse --show-toplevel 2> /dev/null)
	    local OBJ=${PWD#${BASE_DIR}}/${1}
	    local OBJ=${OBJ#/}
	    if [ -n "${OBJ}" ]; then
		__git_commit ${OBJ}
	    fi
	    ;;
	svn)
	    local OBJ=${1}
	    if [ -n "${OBJ}" ]; then
		__svn_commit ${OBJ}
	    fi
	    ;;
	*)
	    echo "No valid repository found"
	    return 255
	    ;;
    esac
}

function repo_status
{
    TARGET=${1}
    if [ -z ${TARGET} ]; then
	TARGET=.
    fi
    pushd ${TARGET} > /dev/null
    case $(_repo_type) in
	git)
	    git fetch
	    git status
	    ;;
	svn)
	    svn st
	    ;;
	*)
	    echo "No valid repository found"
    esac
    popd > /dev/null
}

function repo_push
{
    TARGET=${1}
    if [ -z ${TARGET} ]; then
	TARGET=.
    fi
    pushd ${TARGET} > /dev/null
    case $(_repo_type) in
	git)
	    git pull --rebase
	    git push
	    ;;
	svn)
	    ## This is a no-op
	    true
	    ;;
	*)
	    echo "No valid repository found"
    esac
    popd > /dev/null
}

function repo_pull
{
    TARGET=${1}
    if [ -z ${TARGET} ]; then
	TARGET=.
    fi
    pushd ${TARGET} > /dev/null
    case $(_repo_type) in
	git)
	    git pull --rebase
	    ;;
	svn)
	    svn up
	    ;;
	*)
	    echo "No valid repository found"
    esac
    popd > /dev/null
}

function repo_revert
{
    TARGET=${1}
    if [ -z ${TARGET} ]; then
	TARGET=.
    fi
    pushd ${TARGET} > /dev/null
    case $(_repo_type) in
	git)
	    git reset ${TARGET}
	    git co ${TARGET}
	    ;;
	svn)
	    svn revert ${TARGET}
	    ;;
	*)
	    echo "No valid repository found"
    esac
    popd > /dev/null
}

function repo
{
    CMD=${1}
    shift
    case ${CMD} in
	st|status)
	    repo_status ${@}
	    ;;
	ci|commit)
	    repo_commit ${@}
	    ;;
	push)
	    repo_push ${@}
	    ;;
	pull)
	    repo_pull ${@}
	    ;;
	co|checkout|revert)
	    repo_revert ${@}
	    ;;
	*)
	    echo "repo <cmd> [args]"
	    echo -e "\tcommit"
	    echo -e "\tpull"
	    echo -e "\tpush"
	    echo -e "\trevert"
	    echo -e "\tstatus"
	    ;;
    esac
}

function __git_info
{
    local d="${1}"
    if [ -z "${d}" ]; then
	d=$(_repo_dir)
    fi
    local r="${2}"
    if [ -z "${r}" ]; then
        r=$(_repo_type "${d}")
    fi
    if [ "X${r}" != "Xgit" ]; then
	return;
    fi

    local br
    if test -f "$d/.git/HEAD" ; then
	read br < "$d/.git/HEAD"
	case $br in
	    ref:\ refs/heads/*) br=${br#ref: refs/heads/} ;;
	    *) br=${br:0:8} ;;
	esac
	if [ -f "$d/.git/rebase-merge/interactive" ]; then
	    b="$(cat "$d/.git/rebase-merge/head-name")"
	    b=${b#refs/heads/}
	    br="$br|REBASE-i|$b"
	elif [ -d "$d/.git/rebase-merge" ]; then
	    b="$(cat "$d/.git/rebase-merge/head-name")"
	    b=${b#refs/heads/}
	    br="br|REBASE-m|$b"
	else
	    if [ -d "$d/.git/rebase-apply" ]; then
		if [ -f "$d/.git/rebase-apply/rebasing" ]; then
		    br="$br|REBASE"
		elif [ -f "$d/.git/rebase-apply/applying" ]; then
		    br="$br|AM"
		else
		    br="$br|AM/REBASE"
		fi
	    elif [ -f "$d/.git/MERGE_HEAD" ]; then
		br="$br|MERGE"
	    elif [ -f "$d/.git/BISECT_LOG" ]; then
		br="$br|BISECT"
	    fi
	fi
    fi
    printf $br
}

function __git_commit
{
    local OBJ=${1}
    echo -n "Message? "
    read message
    if [ -z "${message}" ]; then
	echo "No commit message, aborting"
	return 255
    fi
    git add ${OBJ}
    git ci -m "[${OBJ}] ${message}"
}

function __svn_commit
{
    local OBJ=${1}
    echo -n "Message? "
    read message
    if [ -z "${message}" ]; then
	echo "No commit message, aborting"
	return 255
    fi
    svn ci ${OBJ} -m "[${OBJ}] ${message}"
}

function __hg_sharedpath
{
    local root="$1"
    local path="$2"

    if [[ -f "$root/.hg/sharedpath" ]]; then
	echo $(command cat "$root/.hg/sharedpath")/"$path"
    else
	echo "$root/.hg/$path"
    fi
}

function __hg_info
{
    local d="${1}"
    if [ -z "${d}" ]; then
	d=$(_repo_dir)
    fi
    local r="${2}"
    if [ -z "${r}" ]; then
        r=$(_repo_type "${d}")
    fi
    if [ "X${r}" != "Xhg" ]; then
	return;
    fi

    local br extra
    if [ -f "$d/.hg/bisect.state" ]; then
	extra="|BISECT"
    elif [ -f "$d/.hg/histedit-state" ]; then
	extra="|HISTEDIT"
    elif [ -f "$d/.hg/graftstate" ]; then
	extra="|GRAFT"
    elif [ -f "$d/.hg/unshelverebasestate" ]; then
	extra="|UNSHELVE"
    elif [ -f "$d/.hg/rebasestate" ]; then
	extra="|REBASE"
    elif [ -d "$d/.hg/merge" ]; then
	extra="|MERGE"
    fi

    local dirstate=$(test -f $d/.hg/dirstate && \
			    hexdump -vn 20 -e '1/1 "%02x"' $d/.hg/dirstate || \
				echo "empty")
    local current="$d/.hg/bookmarks.current"
    if  [[ -f "$current" ]]; then
	br=$(cat "$current")
	# check to see if active bookmark needs update
	local marks="$d/.hg/bookmarks"
	if [[ -z "$extra" ]] && [[ -f "$marks" ]]; then
	    local markstate=$(grep --color=never " $br$" "$marks" | cut -f 1 -d ' ')
	    if [[ $markstate != $dirstate ]]; then
		extra="|UPDATE_NEEDED"
	    fi
	fi
    else
	br=${dirstate:0:8}
    fi
    local commitcloud
    commitcloud="$(__hg_sharedpath "$d" store/commitcloudrc)"
    if [[ -f "$commitcloud" ]]; then
	local marks=$(grep --color=never "^current_workspace" "$commitcloud" \
			  | cut -f 2 -d '=' \
			  | cut -f 3- -d'/' \
			  | tr '\n' '|' \
			  | head -c -1)
	if [[ -n "$marks" && "$marks" != "default" ]]; then
	    br="$br|{$marks}"
	fi
    fi
    local remote
    remote="$(__hg_sharedpath "$d" store/remotenames)"
    if [[ -f "$remote" ]]; then
	local marks=$(grep --color=never "^$dirstate bookmarks" "$remote" \
			  | cut -f 3 -d ' ' \
			  | cut -f 2- -d '/' \
			  | head -n 1 \
			  | head -c -1)
	if [[ -n "$marks" ]]; then
	    br="$br|$marks"
	fi
    fi
    if [[ -f "$d"/.hg/branch ]]; then
	local branch
	branch=$(cat $d/.hg/branch)
	if [[ $branch != "default" ]]; then
	    br="$br|$branch"
	fi
    fi
    printf $br
}
