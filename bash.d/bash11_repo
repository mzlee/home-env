# .bash_functions repo submodule

function _repo_type
{
    local flag
    git rev-parse --show-toplevel 1> /dev/null 2> /dev/null
    flag=${?}
    if [ ${flag} == 0 ]; then
	echo git
	return 0
    fi
    ls -d .svn 1> /dev/null 2>/dev/null
    flag=${?}
    if [ ${flag} == 0 ]; then
	echo svn
	return 0
    fi
}

function repo_commit
{
    case $(_repo_type) in
	git)
	    local BASE_DIR=$(git rev-parse --show-toplevel 2> /dev/null)
	    local OBJ=${PWD#${BASE_DIR}}/${1}
	    local OBJ=${OBJ#/}
	    if [ -n "${OBJ}" ]; then
		__git_commit ${OBJ}
	    fi
	    ;;
	svn)
	    local OBJ=${1}
	    if [ -n "${OBJ}" ]; then
		__svn_commit ${OBJ}
	    fi
	    ;;
	*)
	    echo "No valid repository found"
	    return 255
	    ;;
    esac
}

function repo_status
{
    TARGET=${1}
    if [ -z ${TARGET} ]; then
	TARGET=.
    fi
    pushd ${TARGET} > /dev/null
    case $(_repo_type) in
	git)
	    git fetch
	    git status
	    ;;
	svn)
	    svn st
	    ;;
	*)
	    echo "No valid repository found"
    esac
    popd > /dev/null
}

function repo_push
{
    TARGET=${1}
    if [ -z ${TARGET} ]; then
	TARGET=.
    fi
    pushd ${TARGET} > /dev/null
    case $(_repo_type) in
	git)
	    git pull --rebase
	    git push
	    ;;
	svn)
	    ## This is a no-op
	    true
	    ;;
	*)
	    echo "No valid repository found"
    esac
    popd > /dev/null
}

function repo_pull
{
    TARGET=${1}
    if [ -z ${TARGET} ]; then
	TARGET=.
    fi
    pushd ${TARGET} > /dev/null
    case $(_repo_type) in
	git)
	    git pull --rebase
	    ;;
	svn)
	    svn up
	    ;;
	*)
	    echo "No valid repository found"
    esac
    popd > /dev/null
}


function __git_commit
{
    local OBJ=${1}
    echo -n "Message? "
    read message
    if [ -z "${message}" ]; then
	echo "No commit message, aborting"
	return 255
    fi
    git add ${OBJ}
    git ci -m "[${OBJ}] ${message}"
}

function __svn_commit
{
    local OBJ=${1}
    echo -n "Message? "
    read message
    if [ -z "${message}" ]; then
	echo "No commit message, aborting"
	return 255
    fi
    svn ci ${OBJ} -m "[${OBJ}] ${message}"
}
