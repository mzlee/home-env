# .bash_functions
function choice {
    file="$1"
    lc=`wc -l < $file`

    if [ "$lc" -gt 0 ]
    then
	line=`expr 1 + $RANDOM % $lc`
	head -n $line $file | tail -n 1
    fi
}

function check_machine {
    local mach="$1"
    local ulist=`ssh $mach "users"`;
    for u in $ulist
    do
	if [ $u != mzlee ]
	then
	    return ""
	fi
    done
    return $mach
}

function pub_machine {
    local COUNT=0
    DOMAIN=cs.utexas.edu
    if [ -f $HOME/.${DOMAIN} ]
    then
	if [ -n "$LAST_PUBLIC" ]
	then
	    LAST_PUBLIC=check_machine $LAST_PUBLIC
	    export LAST_PUBLIC
	fi
	while [ $COUNT -lt 5 -a -z "$LAST_PUBLIC" ]
	do
	    local mach=`choice $HOME/.${DOMAIN}`
	    debug "Trying ${mach}..."
	    local mach=check_machine "$mach.${DOMAIN}"
	    if [ -z "$mach" ]
	    then
		export LAST_PUBLIC=$mach
	    fi
	    local COUNT=`expr $COUNT + 1`
	done
    fi
}

function pub_connect {
    DOMAIN=cs.utexas.edu
    if [ -f $HOME/.${DOMAIN} ]
    then
	while [ -z "$LAST_PUBLIC" ]
	do
	    pub_machine
	done
	ssh `whoami`@$LAST_PUBLIC $@
    fi
}

OLD_CP=/bin/cp

function cp {
    args=( $@ )
    progress=0
    i=0
    for arg in ${args}
    do
	if [ $arg = "--progress" ]
	then
	    progress=1
	fi
	i=`expr i+1`
    done

    if [ $progress = 0 -a $PLATFORM = linux ]
    then
	${OLD_CP} ${args[@]}
    else
	i=0
	for arg in ${args[@]}
	do
	    if [ ${arg:0:1} = "-" ]
	    then
		unset args[i]
	    fi
	    i=`expr $i+1`
	done
	cp_p ${args[@]}
    fi
}

function cp_p
{
   strace -q -ewrite ${OLD_CP} -- "${1}" "${2}" 2>&1 \
      | awk '{
        count += $NF
            if (count % 10 == 0) {
               percent = count / total_size * 100
               printf "%3d%% [", percent
               for (i=0;i<=percent;i++)
                  printf "="
               printf ">"
               for (i=percent;i<100;i++)
                  printf " "
               printf "]\r"
            }
         }
         END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

function papers
{
    if [ -n "$PAPERS_DIR" ]
    then
	DIR=`echo $1|tr '[:lower:]' '[:upper:]'`
	IFS_BAK=$IFS
	IFS="
"
	if [ -z "${DIR}" ]
	then
	    local count=0
	    for d in `ls -1 $PAPERS_DIR`
	    do
		if [ "${d#*\(}" != "${d}" ]
		then
		    printf "%12s\t" "(${d#*\(}"
		    local count=`expr ${count} + 1`
		    if [ ${count} = 8 ]
		    then
			printf "\n"
			count=0
		    fi
		fi
	    done
	    if [ ${count} != 0 ]
	    then
		printf "\n"
	    fi
	else
	    for d in `ls -1 $PAPERS_DIR`
	    do
		if [ "${d#*\(}" = "$DIR)" ]
		then
		    cd "$PAPERS_DIR/${d}"
		    break
		fi
	    done
	fi
	IFS=$IFS_BAK
    fi
}

function notes
{
    if [ -n "$NOTES_DIR" ]
    then
	DIR=`echo $1|tr '[:upper:]' '[:lower:]'`
	IFS_BAK=$IFS
	IFS="
"
	if [ -z ${DIR} ]
	then
	    local count=0
	    for d in `ls -1 $NOTES_DIR`
	    do
		printf "%8s\t" ${d}
		count=`expr ${count} + 1`
		if [ ${count} = 8 ]
		then
		    printf "\n"
		    count=0
		fi
	    done
	    if [ ${count} != 0 ]
	    then
		printf "\n"
	    fi
	else
	    for d in `ls -1 $NOTES_DIR`
	    do
		if [ "${d#${DIR}*}" != "${d}" ]
		then
		    IFS=$IFS_BAK
		    emacs "$NOTES_DIR/${d}/notes.org"
		    break
		fi
	    done
	fi
	IFS=$IFS_BAK
    fi
}
