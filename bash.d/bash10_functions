# .bash_functions
function choice {
    file="$1"
    lc=`wc -l < $file`

    if [ "$lc" -gt 0 ]; then
	line=`expr 1 + $RANDOM % $lc`
	head -n $line $file | tail -n 1
    fi
}

function check_machine {
    local ulist=`ssh $LAST_PUBLIC "users"`;
    for u in $ulist; do
	if [ $u != mzlee ]
	then
	    debug "$u"
	    LAST_PUBLIC=""
	fi
    done
}

function pub_machine {
    local COUNT=0
    DOMAIN=cs.utexas.edu
    if [ -f $HOME/.${DOMAIN} ]; then
	if [ -n "$LAST_PUBLIC" ]; then
	    check_machine
	fi

	while [ -z "$LAST_PUBLIC" ]; do
	    local mach=`choice $HOME/.${DOMAIN}`
	    echo "Trying ${mach}..."
	    LAST_PUBLIC="$mach.${DOMAIN}"
	    check_machine
	    local COUNT=`expr $COUNT + 1`
	done
    fi
    export LAST_PUBLIC
}

function pub_connect {
    DOMAIN=cs.utexas.edu
    if [ -f $HOME/.${DOMAIN} ]; then
	pub_machine
	ssh `whoami`@$LAST_PUBLIC $@
    fi
}

function pub_cpto {
    DOMAIN=cs.utexas.edu
    if [ -f $HOME/.${DOMAIN} ]; then
	pub_machine
	local SRC=$1
	local DEST=${2:-${SRC}}
	scp $SRC `whoami`@$LAST_PUBLIC:$DEST
    fi
}

function pub_cpfrom {
    DOMAIN=cs.utexas.edu
    if [ -f $HOME/.${DOMAIN} ]; then
	pub_machine
	local SRC=$1
	local DEST=${2:-${SRC}}
	scp `whoami`@$LAST_PUBLIC:$SRC $DEST
    fi
}

OLD_CP=/bin/cp

function cp {
    args=( $@ )
    progress=0
    i=0
    for arg in ${args}; do
	if [ $arg = "--progress" ]; then
	    progress=1
	fi
	i=`expr i+1`
    done

    if [ $PLATFORM = linux ]; then
	if [ $progress = 0 ]; then
	    ${OLD_CP} ${args[@]}
	else
	    i=0
	    for arg in ${args[@]}; do
		if [ ${arg:0:1} = "-" ]; then
		    unset args[i]
		fi
		i=`expr $i+1`
	    done
	    cp_p ${args[@]}
	fi
    else
	${OLD_CP} ${args[@]}
    fi
}

function cp_p
{
   strace -q -ewrite ${OLD_CP} -- "${1}" "${2}" 2>&1 \
      | awk '{
        count += $NF
            if (count % 10 == 0) {
               percent = count / total_size * 100
               printf "%3d%% [", percent
               for (i=0;i<=percent;i++)
                  printf "="
               printf ">"
               for (i=percent;i<100;i++)
                  printf " "
               printf "]\r"
            }
         }
         END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

function papers
{
    if [ -n "$PAPERS_DIR" ]; then
	DIR=`echo $1|tr '[:lower:]' '[:upper:]'`
	IFS_BAK=$IFS
	IFS=$'\n'
	if [ -z "${DIR}" ]; then
	    local count=0
	    for d in `ls -1 $PAPERS_DIR`; do
		if [ "${d#*\(}" != "${d}" ]; then
		    printf "%12s\t" "(${d#*\(}"
		    local count=`expr ${count} + 1`
		    if [ ${count} = 8 ]; then
			printf "\n"
			count=0
		    fi
		fi
	    done

	    if [ ${count} != 0 ]; then
		printf "\n"
	    fi
	else
	    for d in `ls -1 $PAPERS_DIR`; do
		D=`echo ${d#*\(}|tr '[:lower:]' '[:upper:]'`
		if [ "${D}" = "$DIR)" ]; then
		    cd "$PAPERS_DIR/${d}"
		    break
		fi
	    done
	fi
	IFS=$IFS_BAK
    fi
}

function find_notes
{
    NOTES_DIR=$(readlink -f `find $HOME/ -type d -name notes -print -quit` 2> /dev/null)
    export NOTES_DIR
}

function notes
{
    if [ -n "$NOTES_DIR" ]; then
	DIR=`echo $1|tr '[:upper:]' '[:lower:]'`
	IFS_BAK=$IFS
	IFS=$'\n'
	if [ -z ${DIR} ]; then
	    local count=0
	    for d in `ls -1 $NOTES_DIR`; do
		printf "%8s\t" ${d}
		count=`expr ${count} + 1`
		if [ ${count} = 8 ]; then
		    printf "\n"
		    count=0
		fi
	    done
	    if [ ${count} != 0 ]; then
		printf "\n"
	    fi
	else
	    for d in `ls -1 $NOTES_DIR`; do
		if [ "${d#${DIR}*}" != "${d}" ]; then
		    IFS=$IFS_BAK
		    emacs "$NOTES_DIR/${d}/notes.org"
		    break
		fi
	    done
	fi
	IFS=$IFS_BAK
    fi
}

function notify-end
{
    local JOB=$1
    while [ 1 ]; do
	notify-send "FINISHED JOB on $HOSTNAME: $JOB"
	sleep 5
    done
}

## Grabbed from the internetz - http://brettterpstra.com/fk-redux/
#find and list processes matching a case-insensitive partial-match string
# Mostly for OSX
function fp
{
    arg=${1-'.*'}
    ps Ao pid,comm | \
	awk '{match($0,/[^\/]+$|\W+$/); print substr($0,RSTART,RLENGTH)": "$1}' | \
	grep -i "${arg}" | \
	grep -v grep
}

function fk
{
    IFS_BAK=$IFS
    IFS=$'\n'
    PS3='Kill which process? (1 to cancel): '
    select OPT in "Cancel" $(fp $1); do
        if [ $OPT != "Cancel" ]; then
            kill $(echo $OPT|awk '{print $NF}')
        fi
        break
    done
    IFS=$IFS_BAK
}
