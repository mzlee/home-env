# .bash_functions notes submodule

function find_notes
{
    NOTES_DIR=$(readlink -f $(find ${HOME}/ -type d -name notes -print -quit) 2> /dev/null)
    export NOTES_DIR
}

function _notes_list
{
    local i=0
    for d in $(find ${NOTES_DIR}/* -maxdepth 1 -type d); do
	local D=${d##${NOTES_DIR}/}
	if [ -z ${D} ]; then
	    continue
	elif [ ${D} == ".git" ]; then
	    continue
	elif [ -f "${NOTES_DIR}/${D}/.hide" ]; then
	    continue
	fi
	echo ${D}
    done
}

function _notes_update
{
    local TARGET=$(echo $1|tr '[:upper:]' '[:lower:]')
    local LIST=$(_notes_list)
    local FOUND=

    if [ -z ${TARGET} ]; then
	## No input, just list
	local i=0
	for d in ${LIST}; do
	    printf "%8s\t" ${d}
	    i=$(( ${i} + 1 ))
	    if [ ${i} = 8 ]; then
		printf "\n"
		i=0
	    fi
	done
	if [ ${i} != 0 ]; then
	    printf "\n"
	fi
	return 0
    fi

    for d in ${LIST}; do
	if [ "${d#${TARGET}*}" != "${d}" ]; then
	    ## Found the project
	    FOUND=${d}
	fi
    done

    if [ -z ${FOUND} ]; then
	echo -n "Project not found.  Create new project [N/y]? "
	read create
	if [ "${create:0:1}" == 'y' -o "${create:0:1}" == 'Y' ]; then
	    mkdir -p "${NOTES_DIR}/${TARGET}"
	    cat "${NOTES_DIR}/.notes.tmpl" > "${NOTES_DIR}/${TARGET}/notes.md"
	    FOUND=${TARGET}
	else
	    return 0
	fi
    fi

    emacs "${NOTES_DIR}/${FOUND}/notes.md"
    pushd ${NOTES_DIR} > /dev/null
    commit ${d}/notes.md
    popd > /dev/null
}

function notes
{
    if [ -z "${NOTES_DIR}" ]; then
	return
    fi
    local ACTION=${1}
    case ${ACTION} in
	commit)
	    ## Commit All
	    ;;
	pull)
	    ## Manual pull
	    ;;
	push)
	    ## Manual push
	    ;;
	*)
	    _notes_update ${ACTION}
	    ;;
    esac
}
